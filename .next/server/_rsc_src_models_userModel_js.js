"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_models_userModel_js";
exports.ids = ["_rsc_src_models_userModel_js"];
exports.modules = {

/***/ "(rsc)/./src/models/userModel.js":
/*!*********************************!*\
  !*** ./src/models/userModel.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongoose */ \"mongoose\");\n/* harmony import */ var mongoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongoose__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Clear any existing model to avoid schema conflicts (for hot-reload environments)\nif ((mongoose__WEBPACK_IMPORTED_MODULE_0___default().models).User) {\n    delete (mongoose__WEBPACK_IMPORTED_MODULE_0___default().models).User;\n}\n/**\n * Utility: pick a subset of keys from an object\n * @param {object} obj\n * @param {string[]} keys\n * @returns {object}\n */ function pick(obj, keys) {\n    if (!obj || typeof obj !== \"object\") return {};\n    const out = {};\n    for (const k of keys){\n        if (Object.prototype.hasOwnProperty.call(obj, k) && obj[k] !== undefined) {\n            out[k] = obj[k];\n        }\n    }\n    return out;\n}\n// Address subdocument schema\nconst addressSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    street: {\n        type: String,\n        trim: true\n    },\n    city: {\n        type: String,\n        required: [\n            true,\n            \"City is required\"\n        ],\n        trim: true\n    },\n    state: {\n        type: String,\n        trim: true\n    },\n    country: {\n        type: String,\n        required: [\n            true,\n            \"Country is required\"\n        ],\n        trim: true\n    },\n    zipCode: {\n        type: String,\n        required: [\n            true,\n            \"Zip/Pin code is required\"\n        ],\n        trim: true\n    },\n    isDefault: {\n        type: Boolean,\n        default: false\n    }\n}, {\n    _id: true\n});\n// OTP subdocument schema\nconst otpSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    code: {\n        type: String,\n        required: true\n    },\n    type: {\n        type: String,\n        enum: [\n            \"registration\",\n            \"login\",\n            \"forgotPassword\",\n            \"emailChange\"\n        ],\n        required: true\n    },\n    expiresAt: {\n        type: Date,\n        required: true,\n        default: ()=>new Date(Date.now() + 10 * 60 * 1000) // 10 minutes\n    },\n    attempts: {\n        type: Number,\n        default: 0,\n        max: 5\n    },\n    isUsed: {\n        type: Boolean,\n        default: false\n    }\n}, {\n    _id: false\n});\n// Main user schema\nconst meetingDetailsSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    meetingDate: {\n        type: String\n    },\n    meetingTimeFrom: {\n        type: String\n    },\n    meetingTimeTo: {\n        type: String\n    },\n    anyTimeInDay: {\n        type: Boolean,\n        default: false\n    }\n}, {\n    _id: false\n});\nconst userSchema = new (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema)({\n    // Optional meeting details for scheduling a meeting\n    meetingDetails: meetingDetailsSchema,\n    // Personal Information\n    firstName: {\n        type: String,\n        required: [\n            true,\n            \"First name is required\"\n        ],\n        trim: true,\n        minlength: [\n            2,\n            \"First name must be at least 2 characters\"\n        ],\n        maxlength: [\n            50,\n            \"First name cannot exceed 50 characters\"\n        ]\n    },\n    lastName: {\n        type: String,\n        required: [\n            true,\n            \"Last name is required\"\n        ],\n        trim: true,\n        minlength: [\n            2,\n            \"Last name must be at least 2 characters\"\n        ],\n        maxlength: [\n            50,\n            \"Last name cannot exceed 50 characters\"\n        ]\n    },\n    email: {\n        type: String,\n        required: [\n            true,\n            \"Email is required\"\n        ],\n        lowercase: true,\n        trim: true,\n        match: [\n            /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please enter a valid email address\"\n        ]\n    },\n    password: {\n        type: String,\n        required: [\n            true,\n            \"Password is required\"\n        ],\n        minlength: [\n            8,\n            \"Password must be at least 8 characters\"\n        ],\n        select: false // Don't include password in queries by default\n    },\n    // Contact Information\n    mobile: {\n        type: String,\n        required: [\n            true,\n            \"Mobile number is required\"\n        ],\n        trim: true,\n        match: [\n            /^\\+?[\\d\\s-()]+$/,\n            \"Please enter a valid mobile number\"\n        ]\n    },\n    alternateEmail: {\n        type: String,\n        lowercase: true,\n        trim: true,\n        match: [\n            /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please enter a valid alternate email address\"\n        ]\n    },\n    // Business Information\n    company: {\n        type: (mongoose__WEBPACK_IMPORTED_MODULE_0___default().Schema).Types.ObjectId,\n        ref: \"Company\"\n    },\n    roles: {\n        type: [\n            String\n        ],\n        enum: {\n            values: [\n                \"buyer\",\n                \"seller\",\n                \"partner\",\n                \"admin\"\n            ],\n            message: \"{VALUE} is not a valid role\"\n        },\n        required: [\n            true,\n            \"Please select at least one role\"\n        ],\n        validate: {\n            validator: function(v) {\n                return v && v.length > 0;\n            },\n            message: \"At least one role must be selected\"\n        }\n    },\n    companyName: {\n        type: String,\n        required: [\n            true,\n            \"Company/Organization name is required\"\n        ],\n        trim: true,\n        maxlength: [\n            100,\n            \"Company name cannot exceed 100 characters\"\n        ]\n    },\n    companyType: {\n        type: String,\n        enum: [\n            \"individual\",\n            \"sme\",\n            \"corporation\",\n            \"government\",\n            \"ngo\"\n        ],\n        default: \"individual\"\n    },\n    // Seller-specific Information\n    sellerProfile: {\n        businessLicense: {\n            type: String,\n            trim: true\n        },\n        taxId: {\n            type: String,\n            trim: true\n        },\n        businessDescription: {\n            type: String,\n            maxlength: [\n                1000,\n                \"Business description cannot exceed 1000 characters\"\n            ],\n            trim: true\n        },\n        businessAddress: {\n            street: String,\n            city: String,\n            state: String,\n            country: String,\n            zipCode: String\n        },\n        bankDetails: {\n            accountHolderName: String,\n            accountNumber: String,\n            bankName: String,\n            routingNumber: String,\n            swiftCode: String\n        },\n        isVerifiedSeller: {\n            type: Boolean,\n            default: false\n        },\n        sellerRating: {\n            type: Number,\n            min: 0,\n            max: 5,\n            default: 0\n        },\n        totalSales: {\n            type: Number,\n            default: 0\n        },\n        joinedAsSellerAt: {\n            type: Date,\n            default: Date.now\n        }\n    },\n    // Address Information\n    addresses: [\n        addressSchema\n    ],\n    // Account Status\n    isVerified: {\n        type: Boolean,\n        default: false\n    },\n    isActive: {\n        type: Boolean,\n        default: true\n    },\n    isBlocked: {\n        type: Boolean,\n        default: false\n    },\n    // Profile Information\n    profilePicture: {\n        type: String,\n        trim: true\n    },\n    bio: {\n        type: String,\n        maxlength: [\n            500,\n            \"Bio cannot exceed 500 characters\"\n        ],\n        trim: true\n    },\n    // Security & Authentication\n    otp: otpSchema,\n    // Password Reset (token is stored hashed; expiry is a Date)\n    forgotPasswordToken: {\n        type: String,\n        select: false\n    },\n    forgotPasswordTokenExpiry: {\n        type: Date,\n        select: false\n    },\n    // Email Verification\n    verifyToken: {\n        type: String,\n        select: false\n    },\n    verifyTokenExpiry: {\n        type: Date,\n        select: false\n    },\n    // Login Tracking\n    lastLogin: {\n        type: Date\n    },\n    loginAttempts: {\n        type: Number,\n        default: 0\n    },\n    lockedUntil: {\n        type: Date\n    },\n    // Preferences\n    preferences: {\n        newsletter: {\n            type: Boolean,\n            default: true\n        },\n        notifications: {\n            email: {\n                type: Boolean,\n                default: true\n            },\n            sms: {\n                type: Boolean,\n                default: false\n            }\n        },\n        language: {\n            type: String,\n            default: \"en\",\n            enum: [\n                \"en\",\n                \"es\",\n                \"fr\",\n                \"de\"\n            ]\n        },\n        timezone: {\n            type: String,\n            default: \"UTC\"\n        }\n    },\n    // Soft Delete\n    deletedAt: {\n        type: Date,\n        default: null\n    }\n}, {\n    timestamps: true,\n    toJSON: {\n        virtuals: true,\n        transform: function(doc, ret) {\n            delete ret.password;\n            delete ret.forgotPasswordToken;\n            delete ret.forgotPasswordTokenExpiry;\n            delete ret.verifyToken;\n            delete ret.verifyTokenExpiry;\n            return ret;\n        }\n    },\n    toObject: {\n        virtuals: true\n    }\n});\n// Indexes for performance and lookups\nuserSchema.index({\n    email: 1\n}, {\n    unique: true\n});\nuserSchema.index({\n    mobile: 1\n});\nuserSchema.index({\n    roles: 1\n});\nuserSchema.index({\n    isVerified: 1,\n    isActive: 1\n});\nuserSchema.index({\n    companyName: 1\n});\nuserSchema.index({\n    deletedAt: 1\n});\n// IMPORTANT: Do NOT create a TTL index on otp.expiresAt because TTL would delete the entire user document when it expires.\n// userSchema.index({ \"otp.expiresAt\": 1 }, { expireAfterSeconds: 0 });\n// Virtual for full name\nuserSchema.virtual('fullName').get(function() {\n    return `${this.firstName} ${this.lastName}`;\n});\n// Virtual for account locked status\nuserSchema.virtual('isLocked').get(function() {\n    return !!(this.lockedUntil && this.lockedUntil > Date.now());\n});\n// Virtual for default address\n/**\n * Computes the user's default address.\n *\n * - Returns the address with isDefault === true.\n * - Falls back to the first address if none is marked default.\n * - Returns undefined when there are no addresses.\n *\n * @this {{ addresses?: Array<{ isDefault?: boolean }> }}\n * @returns {{ isDefault?: boolean } | undefined}\n */ userSchema.virtual('defaultAddress').get(function getDefaultAddress() {\n    const addresses = this.addresses;\n    if (!Array.isArray(addresses) || addresses.length === 0) return undefined;\n    const preferred = addresses.find((addr)=>addr?.isDefault === true);\n    return preferred || addresses[0];\n});\n// Pre-save middleware to hash password\nuserSchema.pre('save', async function(next) {\n    // Only hash password if it's been modified or new\n    if (!this.isModified('password')) return next();\n    try {\n        const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().genSalt(12);\n        this.password = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(this.password, salt);\n        next();\n    } catch (error) {\n        next(error);\n    }\n});\n// Pre 'findOneAndUpdate' middleware to hash password when updated via query operators\nuserSchema.pre('findOneAndUpdate', async function(next) {\n    try {\n        const update = this.getUpdate() || {};\n        const hasDirect = Object.prototype.hasOwnProperty.call(update, 'password');\n        const hasSet = update.$set && Object.prototype.hasOwnProperty.call(update.$set, 'password');\n        const newPassword = hasDirect ? update.password : hasSet ? update.$set.password : undefined;\n        if (newPassword) {\n            const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().genSalt(12);\n            const hashed = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(String(newPassword), salt);\n            if (hasDirect) update.password = hashed;\n            if (hasSet) update.$set.password = hashed;\n            this.setUpdate(update);\n        }\n        next();\n    } catch (err) {\n        next(err);\n    }\n});\n// Pre-save middleware to hash OTP\nuserSchema.pre('save', async function(next) {\n    if (this.otp && this.otp.code && this.isModified('otp.code')) {\n        try {\n            const salt = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().genSalt(10);\n            this.otp.code = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(this.otp.code, salt);\n        } catch (error) {\n            return next(error);\n        }\n    }\n    next();\n});\n// Ensure only one default address per user\nuserSchema.pre('save', function(next) {\n    if (this.addresses && this.addresses.length > 0) {\n        const defaultAddresses = this.addresses.filter((addr)=>addr.isDefault);\n        if (defaultAddresses.length > 1) {\n            // Set only the first one as default, rest as false\n            this.addresses.forEach((addr, index)=>{\n                addr.isDefault = index === 0;\n            });\n        } else if (defaultAddresses.length === 0 && this.addresses.length > 0) {\n            // If no default, set first as default\n            this.addresses[0].isDefault = true;\n        }\n    }\n    next();\n});\n// Instance method to compare password\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n    if (!this.password) return false;\n    return await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().compare(candidatePassword, this.password);\n};\n// Instance method to compare OTP\nuserSchema.methods.compareOTP = async function(candidateOTP) {\n    if (!this.otp || !this.otp.code) return false;\n    return await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().compare(candidateOTP, this.otp.code);\n};\n// Instance method to check if OTP is valid\nuserSchema.methods.isOTPValid = function(type) {\n    if (!this.otp || this.otp.isUsed) return false;\n    if (this.otp.type !== type) return false;\n    if (this.otp.expiresAt < new Date()) return false;\n    if (this.otp.attempts >= 5) return false;\n    return true;\n};\n// Instance method to increment login attempts\nuserSchema.methods.incLoginAttempts = function() {\n    // If we have a previous lock that has expired, restart at 1\n    if (this.lockedUntil && this.lockedUntil < Date.now()) {\n        return this.updateOne({\n            $unset: {\n                lockedUntil: 1\n            },\n            $set: {\n                loginAttempts: 1\n            }\n        });\n    }\n    const updates = {\n        $inc: {\n            loginAttempts: 1\n        }\n    };\n    // If we have hit max attempts and it's not locked already, lock the account\n    if (this.loginAttempts + 1 >= 5 && !this.isLocked) {\n        updates.$set = {\n            lockedUntil: Date.now() + 2 * 60 * 60 * 1000\n        }; // 2 hours\n    }\n    return this.updateOne(updates);\n};\n// Instance method to reset login attempts\nuserSchema.methods.resetLoginAttempts = function() {\n    return this.updateOne({\n        $unset: {\n            loginAttempts: 1,\n            lockedUntil: 1\n        }\n    });\n};\n// Static method to find active users\nuserSchema.statics.findActive = function() {\n    return this.find({\n        isActive: true,\n        deletedAt: null\n    });\n};\n// Static method to find by role\nuserSchema.statics.findByRole = function(role) {\n    return this.find({\n        roles: role,\n        isActive: true,\n        deletedAt: null\n    });\n};\n// Instance method for soft delete\nuserSchema.methods.softDelete = function() {\n    this.deletedAt = new Date();\n    this.isActive = false;\n    return this.save();\n};\n/**\n * PASSWORD RESET: Create a reset token (returns plain token for email; stores hashed token + expiry)\n * @returns {Promise<string>} plain reset token\n */ userSchema.methods.createPasswordResetToken = async function() {\n    // Generate a 32-byte token and hash it before storing\n    const plainToken = crypto__WEBPACK_IMPORTED_MODULE_2___default().randomBytes(32).toString('hex');\n    const hashedToken = crypto__WEBPACK_IMPORTED_MODULE_2___default().createHash('sha256').update(plainToken).digest('hex');\n    this.forgotPasswordToken = hashedToken;\n    // 15 minutes expiry (adjust as needed)\n    this.forgotPasswordTokenExpiry = new Date(Date.now() + 15 * 60 * 1000);\n    // Save without triggering validations on other fields\n    await this.save({\n        validateBeforeSave: false\n    });\n    return plainToken;\n};\n/**\n * PASSWORD RESET: Complete reset by token\n * @param {string} token - plain token from email\n * @param {string} newPassword\n * @returns {Promise<boolean>} true on success\n */ userSchema.statics.resetPasswordByToken = async function(token, newPassword) {\n    const hashedToken = crypto__WEBPACK_IMPORTED_MODULE_2___default().createHash('sha256').update(String(token)).digest('hex');\n    const user = await this.findOne({\n        forgotPasswordToken: hashedToken,\n        forgotPasswordTokenExpiry: {\n            $gt: new Date()\n        }\n    }).select('+password'); // password hashing is handled by pre-save\n    if (!user) return false;\n    user.password = String(newPassword);\n    user.forgotPasswordToken = undefined;\n    user.forgotPasswordTokenExpiry = undefined;\n    // Also clear lockouts and login attempts on password reset\n    user.loginAttempts = 0;\n    user.lockedUntil = undefined;\n    await user.save();\n    return true;\n};\n/**\n * PASSWORD RESET: Directly set a new password for the current user instance\n * @param {string} newPassword\n * @returns {Promise<void>}\n */ userSchema.methods.setPassword = async function(newPassword) {\n    this.password = String(newPassword);\n    // Clear any outstanding reset tokens\n    this.forgotPasswordToken = undefined;\n    this.forgotPasswordTokenExpiry = undefined;\n    await this.save();\n};\n/**\n * EDIT USER DETAILS (safe): restrict updates to allowed fields and run validators\n * Disallows direct password changes (use setPassword or resetPasswordByToken)\n * @param {object} updates\n * @param {{ new?: boolean, runValidators?: boolean }=} options\n * @returns {Promise<mongoose.Document>}\n */ userSchema.statics.updateEditableFieldsById = async function(id, updates, options = {}) {\n    const ALLOWED_FIELDS = [\n        'firstName',\n        'lastName',\n        'mobile',\n        'alternateEmail',\n        'companyName',\n        'companyType',\n        'addresses',\n        'preferences',\n        'profilePicture',\n        'bio',\n        'meetingDetails',\n        'sellerProfile'\n    ];\n    const filtered = pick(updates, ALLOWED_FIELDS);\n    // Guard: prevent accidental password/role/status updates via this path\n    delete filtered.password;\n    delete filtered.roles;\n    delete filtered.isActive;\n    delete filtered.isBlocked;\n    delete filtered.isVerified;\n    delete filtered.deletedAt;\n    const doc = await this.findByIdAndUpdate(id, {\n        $set: filtered\n    }, {\n        new: options.new ?? true,\n        runValidators: options.runValidators ?? true,\n        context: 'query'\n    });\n    return doc;\n};\n/**\n * EDIT USER DETAILS (instance): assign allowed fields and save\n * @param {object} updates\n * @returns {Promise<mongoose.Document>}\n */ userSchema.methods.updateProfile = async function(updates) {\n    const ALLOWED_FIELDS = [\n        'firstName',\n        'lastName',\n        'mobile',\n        'alternateEmail',\n        'companyName',\n        'companyType',\n        'addresses',\n        'preferences',\n        'profilePicture',\n        'bio',\n        'meetingDetails',\n        'sellerProfile'\n    ];\n    const filtered = pick(updates, ALLOWED_FIELDS);\n    Object.assign(this, filtered);\n    return this.save();\n};\n/**\n * HARD DELETE: Permanently delete this user document\n * @returns {Promise<void>}\n */ userSchema.methods.hardDelete = async function() {\n    await this.deleteOne(); // Deletes this document permanently\n};\n/**\n * HARD DELETE: Permanently delete a user by ID\n * @param {mongoose.Types.ObjectId | string} id\n * @returns {Promise<{deletedCount: number}>}\n */ userSchema.statics.hardDeleteById = async function(id) {\n    return this.deleteOne({\n        _id: id\n    });\n};\n// Create the model\nconst User = mongoose__WEBPACK_IMPORTED_MODULE_0___default().model(\"User\", userSchema);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (User);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/models/userModel.js\n");

/***/ })

};
;